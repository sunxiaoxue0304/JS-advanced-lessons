//不用解构赋值方式定义变量
var a = 1;var b = 2;var c = 3;
console.log(a,b,c); //1 2 3
//用解构赋值方式定义变量
var [a, b, c] = [1, 2, 3];
console.log(a,b,c); //1 2 3
//let 也支持解构赋值
let [foo,[[bar],baz]] = [1,[[2],3]];
console.log(foo,bar,baz); //123

//数组结构赋值
let [ , , xx] = ["foo", "bar", "baz"];
console.log(xx); // "baz"

let [x, , y] = [1, 2, 3];
console.log(x,y); //1 3

let [head, ...tail] = [1, 2, 3, 4];
console.log(head,tail); //1 [2, 3, 4]

let [d, e, ...f] = ['a'];
console.log(d,e,f); // a undefined []

//赋值不成功结果为undefined
var [foo2] = [];
var [bar2, fee2] = [1];
console.log(foo2,fee2,bar2); //undefined undefined 1

//不完全解构
let [x2, y2] = [1, 2, 3];
console.log(x2, y2); //1 2
let [a2, [b2], d2] = [1, [2, 3], 4];
console.log(a2, b2, d2); //1 2 4

[x4, y4 = 'b'] = ['a',undefined]; // x4='a' y4='b'

// ES6内部使用严格相等运算符（===），判断一个位置是否有值。
// 所以，如果一个数组成员不严格等于undefined，默认值是不会生效的。
var [x5 = 1] = [undefined];//x5 为 1
var [x6 = 1] = [null];//x6 为 null

function f2() {
    return 2;
}
let [x7 = f2()] = [1];
console.log(x7); //1

//对象的解构赋值
var { foo1, bar1 } = { foo1: "aaa", bar1: "bbb" };
console.log(foo1,bar1); //aaa bbb

//对象的属性没有次序，变量必须与属性同名，才能取到正确的值
var { bar2, foo2 } = { foo2: "ccc", bar2: "ddd" };
console.log(foo2,bar2); //ccc ddd
var { baz3 } = { foo3: "ccc", bar3: "ddd" };
console.log(baz3); //undefined
var { foo4: baz4 } = { foo4: 'aaa', bar4: 'bbb' };
console.log(baz4); //aaa

let obj1 = { first: 'hello', last: 'world' };
let { first: f, last: l } = obj1;
console.log(f,l); //hello world
let { first, last } = obj1;
console.log(first,last); //hello world

var node = {
    loc: {
        start: {
            line: 1,
            column: 5
        }
    }
};
var { loc: { start: { line }} } = node;
line //1

//嵌套赋值
let obj3 = {};
let arr = [];
({ foo7: obj3.prop, bar7: arr[0] } = { foo7: 123, bar7: true });
console.log(obj3); //{prop:123}
console.log(arr); //[true]

//字符串解构赋值
const [a, b, c, d, e] = 'hello';
console.log(a); //h
console.log(b); //e
console.log(c); //l
console.log(d); //l
console.log(e); //o
let {length : len} = 'hello';
console.log(len); //5
//数字解构赋值
let {toString: s1} = 123;
console.log(s1); //function toString() {[native code]}
s1 === Number.prototype.toString // true

//函数参数解构赋值
function move1({x = 0, y = 0} = {}) {
    return [x, y];
}
console.log(move1({x: 3, y: 4})); // [3, 4]
console.log(move1({x: 3})); // [3, 0]
console.log(move1({})); // [0, 0]
console.log(move1()); // [0, 0]

function move2({x, y} = { x: 0, y: 0 }) {
    return [x, y];
}
console.log(move2({x: 3, y: 8})); // [3, 8]
console.log(move2({x: 3})); // [3, undefined]
console.log(move2({})); // [undefined, undefined]
console.log(move2()); // [0, 0]

//交换变量的值
var [x,y] = ["a","b"];
[x, y] = [y, x];
console.log(x,y); //b,a

//函数参数定义
//有次序的值
function f([x, y, z]) {
    console.log(x);
    console.log(y);
    console.log(z);
}
f([1, 2, 3]);
//无次序的值
function f({x, y, z}) {
    console.log(x);
    console.log(y);
    console.log(z);
}
f({z: 3, y: 2, x: 1});
