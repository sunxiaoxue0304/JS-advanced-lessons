var f = function (v) {
    return v + 1;
};
f(2); //3
//箭头函数  参数 => 函数体 或 （参数） => { 函数体 }
var f = v => v + 1;
//var f = (v) => {return v + 1;};
f(2); //3

//没有参数和有多个参数的情况下，需要使用小括号来表示参数
var f = () => 5;
//等同于ES5
var f = function () {
    return 5
};
//如果有多条语句则需要有大括号表示函数体
var foo = (num1, num2) => {
    if (num1 > num2) {
        return num1 * 2;
    } else {
        return num2 * 2;
    }
};
foo(2,3);//6
foo(3,2);//6
//等同于ES5
var foo = function (num1, num2) {
    if (num1 > num2) {
        return num1 * 2;
    } else {
        return num2 * 2;
    }
};
foo(2,3);//6
foo(3,2);//6

var max = function (a, b) {
    return a > b ? a : b;
};
//ES6
var max = (a,b) => a>b?a:b

var point = {
    x:0,
    y:0,
    moveTo:function (x,y) {
        //内部嵌套函数
        function moveToX() {
            this.x = x; //this绑定到window
        }
        //内部嵌套函数
        function moveToY() {
            this.y = y; 
        }
        moveToX();
        moveToY();
    }
};
point.moveTo(2,2);
console.log(point); //{x:0,y:0}
console.log(window.x,window.y);//2 2 

var point = {
    x:0,
    y:0,
    moveTo:function (x,y) {
        var that = this;//软绑定
        //内部嵌套函数
        function moveToX() {
            that.x = x;//this改为that
        }
        //内部嵌套函数
        function moveToY() {
            that.y = y;//this绑定到了point对象
        }
        moveToX();
        moveToY();
    }
};
point.moveTo(2,2);
console.log(point);//{x:2,y:2}
console.log(window.x,window.y);//2 2
//ES6
var point = {
    x:0,
    y:0,
    moveTo:function (x,y) {
        //内部嵌套函数
        var moveToX = ()=>this.x=x;
        //内部嵌套函数
        var moveToY = ()=>this.y=y;
        moveToX();
        moveToY();
    }
};
point.moveTo(2,2);
console.log(point); //{x:2,y:2}
console.log(window.x,window.y);//2 2 

function foo() {
    setTimeout(function(){
        console.log('id:', this.id);
    }, 100);
}
var id = 21;
foo.call({ id: 42 });//id: 21
//箭头函数的写法和结果
function foo() {
    setTimeout(() => {
        console.log('id:', this.id);
    }, 100);
}
var id = 21;
foo.call({ id: 42 });//id: 42

//由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上小括号
var getTempItem = itemId => ({ id: itemId, name: "Temp" });
getTempItem(23); //{id: 23, name: "Temp"}
var getTempItem = function (itemId) {
    return { id: itemId, name: "Temp" }
};
getTempItem(23); //{id: 23, name: "Temp"}

//函数参数默认值
var sum = function(a,b,c){
    b = b||4;
    c = c||5;
    return a+b+c;
};
console.log(sum(1,2,3));//1+2+3 6
console.log(sum(1,2));//1+2+5 8 
console.log(sum(1));//1+4+5 10
console.log(sum(1,0,0));//1+4+5 10 //应为1+0+0

var sum = function(a,b,c){
    if(b!=false){b = b||4;}//(b!=false)&&(b=b||4);
    if(c!=false){c = c||5;}//(c!=false)&&(c=c||5);
    return a+b+c;
};
console.log(sum(1,2,3));//1+2+3
console.log(sum(1,2));//1+2+5
console.log(sum(1));//1+4+5
console.log(sum(1,0,0));//1+0+0

var sum = function(a,b=4,c=5){
    return a+b+c;
};
console.log(sum(1,2,3));//1+2+3
console.log(sum(1,2));//1+2+5
console.log(sum(1));//1+4+5
console.log(sum(1,0,0));//1+0+0

//默认值顺序，参数一般有顺序，有默认值的参数应该是尾参数
function f(x = 1,y) {
    return [x,y];
}
f();//[1,undefined]
f(2);//[2,undefined]
f(,3);//报错，无法使x用1，y用3
//有默认值的参数在最后
function f(x,y = 1) {
    return [x,y];
}
f();//[undefined, 1]
f(2);//[2, 1]

//ES5实参数大于形参数量时，可以通过arguments来获得所有参数
function test() {
    console.log(arguments);
    //console.log(test.arguments);
}
test("a","b","c");//["a","b","c"]
//...Rest(剩余操作符)相当于合并若干参数为一个数组，主要用于函数定义时，代替 arguments
function f(...y){
    console.log(y);
}
f("a","b","c");//["a","b","c"]

//...Spread(扩展操作符)相当于解数组为分散的参数，主要用于函数调用时，...Rest的逆运算
function f(x,...y){
    console.log(x,y);
}
f("a",...["b","c"]);//等价于f("a","b","c");
f("a");//"a",[]
f();//undefined,[]
