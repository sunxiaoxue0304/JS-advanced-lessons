//数据类型Symbol
let s = Symbol();//基本数据类型第一种 不能用new
typeof s;// "symbol"
var s1 = Symbol('foo');
var s2 = Symbol('bar');
console.log(s1); //Symbol(foo)
console.log(s2); //Symbol(bar)
console.log(s1.toString()); //"Symbol(foo)"
console.log(s2.toString()); //"Symbol(bar)"

//相同参数的Symbol函数的返回值是不相等的
var s1 = Symbol();
var s2 = Symbol();
s1 === s2 //false
var s1 = Symbol("foo");
var s2 = Symbol("foo");
s1 === s2 //false

//Symbol值不能与其他类型的值进行运算，会报错
var sym = Symbol('My symbol');
"your symbol is " + sym;//报错
//Symbol值可以显式转为字符串
var sym = Symbol('My symbol');
String(sym); //'Symbol(My symbol)'
sym.toString(); //'Symbol(My symbol)'

var mySymbol = Symbol();
//第一种写法
var a = {};
a[mySymbol] = 'Hello!'; //中括号内不要加引号
//第二种写法
var a = {
    [mySymbol]: 'Hello!'
};
//第三种写法
var a = {};
Object.defineProperty(a, mySymbol, { value: 'Hello!' });
a[mySymbol] //"Hello!"

var mySymbol = Symbol();
var a = {};
a.mySymbol = 'Hello!';
a[mySymbol] //undefined
a['mySymbol'] //"Hello!"

var myS1 = Symbol("xx");
var myS2 = "xx";
var obj = {
    [myS1]:123,
    [myS2]:456
};
console.log(obj[myS1],obj[Symbol("xx")]);//123 undefined
console.log(obj[myS2],obj["xx"]);//456 456
console.log(obj["myS1"]);//undefined
console.log(obj["myS2"]);//undefined

var obj = {};
var a = Symbol('a');
var b = Symbol('b');
obj[a] = 'Hello';
obj[b] = 'World';
var objectSymbols = Object.getOwnPropertySymbols(obj);
console.log(objectSymbols);//[Symbol(a), Symbol(b)]

var obj = {};
var foo = Symbol("foo");
Object.defineProperty(obj, foo, {
    value: "foo bar",
});
for (var i in obj) {
    console.log(i); //
}
Object.getOwnPropertyNames(obj);//[]
Object.getOwnPropertySymbols(obj);//[Symbol(foo)]

var s1 = Symbol.for('foo');
var s2 = Symbol.for('foo');
console.log(s1 === s2); //true

console.log(Symbol.for("bar") === Symbol.for("bar"));//true
console.log(Symbol("bar") === Symbol("bar"));//false
console.log(Symbol.for("bar") === Symbol("bar"));//false

var s1 = Symbol.for("foo");
console.log(Symbol.keyFor(s1)); //"foo"
var s2 = Symbol("foo");
console.log(Symbol.keyFor(s2)); //undefined
var s3 = Symbol(Symbol.keyFor(s1));
console.log(s1 === s3); //false
console.log(s2 === s3); //false
var s4 = Symbol.for(Symbol.keyFor(s1));
console.log(s1 === s4); //true
console.log(s2 === s4); //false

//数据结构set
var s1 = new Set([1,2,3,4,5,5,6,2,2]);
console.log(s1);
var s2 = new Set();
[2, 3, 5, 4, 5, 2, 2].map(x => s2.add(x));
for (var i of s2) {
    console.log(i);
}// 2 3 5 4

var set = new Set([1, 2, 3, 4, 4]);
console.log([...set]);//[1, 2, 3, 4]

var items = new Set([1, 2, 3, 4, 5, 5, 5, 5]);
console.log(items.size); //5

var set = new Set();
set.add({});
console.log(set.size); //1
set.add({});
console.log(set.size); //2

s.add(1).add(2).add(2);
s.size //2
s.has(1); //true
s.has(2); //true
s.has(3); //false
s.delete(2);
s.has(2); //false

//Array.from方法可以将Set结构转为数组。
var items = new Set([1, 2, 3, 4, 5]);
var array = Array.from(items);
//...也可以将set转换成数组
console.log([...(new Set([1, 2, 3, 4, 5]))]);//[1, 2, 3, 4, 5]
console.log(...(new Set([1, 2, 3, 4, 5])));//1, 2, 3, 4, 5

//数据结构map
var m = new Map();
var o = {p: 'Hello World'};
m.set(o, 'content');
m.get(o); //"content"
m.has(o); //true
m.delete(o); //true
m.has(o); //false

var o = {};
var map = new Map([
    ['name', '张三'],
    [o, 'Author']
]);
map.size; //2
map.has('name'); //true
map.get('name'); //"张三"
map.has(o); //true
map.get(o); //"Author"

var map = new Map();
map.set(['a'], 555);
map.get(['a']); //undefined
var map = new Map();
map.set('a', 555);
map.get('a'); //555

var map = new Map();
var k1 = ['a'];
var k2 = ['a'];
map.set(k1, 111);
map.set(k2, 222);
map.get(k1); //111
map.get(k2); //222
